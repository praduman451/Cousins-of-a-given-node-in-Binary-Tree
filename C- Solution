#include<stdio.h>
#include<stdlib.h>

struct Node
{
  int data;
  struct Node *left, *right;
};

struct Node* newNode(int data)
{
  struct Node* node = (struct Node*)malloc(sizeof(struct Node));
  node->data = data;
  node->left = node->right = NULL;
  return (node);
}

struct Node* insertLevelOrder(int arr[], struct Node* root, int i, int n)
{
  if (i < n)
  {
    struct Node* temp = newNode(arr[i]);
    root = temp;

    root->left = insertLevelOrder(arr, root->left, 2 * i + 1, n);

    root->right = insertLevelOrder(arr, root->right, 2 * i + 2, n);
  }
  return root;
}

struct Node* buildTree(int t[], int n)
{
  struct Node* root = (struct Node*)malloc(sizeof(struct Node));
  root = insertLevelOrder(t, root, 0, n);
  return(root);
}

int arr[100] = {0};
int p = 0;
struct Node* node1 = NULL;

int hoftree(struct Node *root)
{
    int max;
    if (root!=NULL)
    {
        int leftsubtree = hoftree(root->left);
        int rightsubtree = hoftree(root->right);
        if (leftsubtree > rightsubtree)
        {
            max = leftsubtree + 1;
            return max;
        }
        else
        {
            max = rightsubtree + 1;
            return max;
        }
    }
}

void currentlevel(struct Node *root, int level,int k)
{
    if (root != NULL)
    {
        if (level == 1)
        {
          if(root->data == k)
          {
            node1 = root;
          }
         
        }
        else if (level > 1)
        {
            currentlevel(root->left, level-1,k);
            currentlevel(root->right, level-1,k);
        }          
    }
}

void traverse(struct Node* newnode,int k)
{
   int i;
    int height = hoftree(newnode);
    for(i = 1; i <= height; i++)      
    {
        currentlevel(newnode,i,k);
    }
}

int levelOfNode(struct Node *root, struct Node *node, int level){
   if (root == NULL)
      return 0;
   if (root == node)
      return level;
   int downlevel = levelOfNode(root->left,
   node, level + 1);
   if (downlevel != 0)
      return downlevel;
   return levelOfNode(root->right, node, level + 1);
}

void printCousin(struct Node* root,struct Node *node, int level){
   if (root == NULL || level < 2){
     return;
   }
   if (level == 2){
      if (root->left == node || root->right == node)
         {
     return;
   }
      if (root->left)
         arr[p++] = root->left->data;
      if (root->right)
          arr[p++] = root->right->data;
   }
   else if (level > 2){
      printCousin(root->left, node, level - 1);
      printCousin(root->right, node, level - 1);
   }
}

void cousinNode(struct Node *root, struct Node *node){
   int level = levelOfNode(root, node, 1);
   printCousin(root, node, level);
}

void printCousins(struct Node* root, int k)
{
 
traverse(root,k);
cousinNode(root,node1);
  if(arr[0] == 0)
  {
    printf("%d",-1);
    return;
  }
  int i;
for(i=0;i<p;i++)
{
  printf("%d ",arr[i]);
}
  return;     }

int main()
{
  int a[50], n, i;
  struct Node* root = NULL;
  scanf("%d", &n);
  if(n>0)
  {
    for(i=0;i<n;i++)
      scanf("%d", &a[i]);
    root = buildTree(a, n);
  }
  scanf("%d", &i);
  printCousins(root, i);
  return 0;
}
